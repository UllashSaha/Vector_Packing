/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vetor_packing_1;

import java.awt.List;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author student
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public int k;
    public String algoName;
    int xValue;
    int yValue;
    bin[][] arrayOfBins;
    bin[][] copyOfBinArray;
    int limit=0;

    int[] totalCost = new int[10];
    double [] averageCost=new double[10];
    private Object timeStamp;

    public MainFrame() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        input_field_button = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        numOfiteartionField = new javax.swing.JTextField();
        costOfAlgo1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        numOfinputField = new javax.swing.JTextField();
        k_textfield = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        limit_field = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        costOfAlgo2 = new javax.swing.JTextField();
        costOfAlgo3 = new javax.swing.JTextField();
        costOfAlgo4 = new javax.swing.JTextField();
        costOfAlgo5 = new javax.swing.JTextField();
        costOfAlgo6 = new javax.swing.JTextField();
        costOfAlgo7 = new javax.swing.JTextField();
        costOfAlgo8 = new javax.swing.JTextField();
        costOfAlgo9 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        costOfAlgo10 = new javax.swing.JTextField();

        jLabel4.setText("jLabel4");

        jLabel16.setText("jLabel16");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Agency FB", 0, 14)); // NOI18N

        input_field_button.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        input_field_button.setText("Okay");
        input_field_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_field_buttonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("                bounded value, k ");

        numOfiteartionField.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        costOfAlgo1.setEditable(false);
        costOfAlgo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                costOfAlgo1ActionPerformed(evt);
            }
        });

        jLabel7.setText("maxTotal _maxTotal");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(51, 204, 0));
        jLabel15.setText("Input Fields");

        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel5.setText("             Vector Packing");

        jLabel6.setText("                        Total number of Iteration");

        jLabel17.setText("                      Input length");

        jLabel1.setText("        limt of each dimension of a input ");

        jLabel2.setText("maxTotal _maxMax");

        jLabel8.setText("maxTotal_maxMin");

        jLabel9.setText("maxMax_maxTotal");

        jLabel10.setText("maxMax_maxMax");

        jLabel11.setText("maxMax_maxMin");

        jLabel12.setText("maxMin_maxTotal");

        jLabel13.setText("maxMin_maxMax");

        jLabel18.setText("maxMin_maxMin");

        jLabel19.setText("First fit");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(329, 329, 329)
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(input_field_button, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(k_textfield)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(numOfinputField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(numOfiteartionField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(limit_field))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(152, 152, 152))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(costOfAlgo10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(costOfAlgo1)
                            .addComponent(costOfAlgo2)
                            .addComponent(costOfAlgo3)
                            .addComponent(costOfAlgo4)
                            .addComponent(costOfAlgo5)
                            .addComponent(costOfAlgo6)
                            .addComponent(costOfAlgo7)
                            .addComponent(costOfAlgo8)
                            .addComponent(costOfAlgo9))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(costOfAlgo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(costOfAlgo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(costOfAlgo3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(costOfAlgo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(costOfAlgo5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(costOfAlgo6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(costOfAlgo7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(costOfAlgo8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(costOfAlgo9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(costOfAlgo10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numOfiteartionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numOfinputField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(limit_field)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(k_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(input_field_button)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void input_field_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_field_buttonActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < 10; i++) {
            totalCost[i] = 0;
        }
        this.limit=Integer.parseInt(limit_field.getText());
        this.k = Integer.parseInt(k_textfield.getText());

        this.arrayOfBins = new bin[10][k];
        this.copyOfBinArray = new bin[10][k];
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < k; j++) {
                arrayOfBins[i][j] = new bin(0, 0);
                arrayOfBins[i][j].binNumber = j;
                arrayOfBins[i][j].setMaxTotal();
                arrayOfBins[i][j].setBinUsed(0);

                copyOfBinArray[i][j] = new bin(0, 0);
                copyOfBinArray[i][j].binNumber = j;
                copyOfBinArray[i][j].setMaxTotal();
                copyOfBinArray[i][j].setBinUsed(0);

            }
        }

        this.expectedCostCalculation();


    }//GEN-LAST:event_input_field_buttonActionPerformed

    private void costOfAlgo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_costOfAlgo1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_costOfAlgo1ActionPerformed
    public void expectedCostCalculation() {
        double numOfIteration = Integer.parseInt(numOfiteartionField.getText());
        int numOfInput = Integer.parseInt(numOfinputField.getText());
        Random objGenerator = new Random();
        for (int i = 1; i <= numOfIteration; i++) {
          for (int i1 = 0; i1 < 10; i1++) {
            for (int j1 = 0; j1 < k; j1++) {
                arrayOfBins[i1][j1] = new bin(0, 0);
                arrayOfBins[i1][j1].binNumber = j1;
                arrayOfBins[i1][j1].setMaxTotal();
                arrayOfBins[i1][j1].setBinUsed(0);

                copyOfBinArray[i1][j1] = new bin(0, 0);
                copyOfBinArray[i1][j1].binNumber = j1;
                copyOfBinArray[i1][j1].setMaxTotal();
                copyOfBinArray[i1][j1].setBinUsed(0);

            }
        }
            for (int j = 1; j <= numOfInput; j++) {

                xValue = objGenerator.nextInt(limit+1);
                yValue = objGenerator.nextInt(limit+1);
                
        

//               System.out.print("(" + xValue + "," + yValue + ") ");
                
//
                calculate_firstfit();
                calculate_maxTotal_maxTotal();
                calculate_maxTotal_maxMax();
                calculate_maxTotal_maxMin();

                calculate_maxMax_maxTotal();
                calculate_maxMax_maxMax();
                calculate_maxMax_maxMin();

                calculate_maxMin_maxTotal();
                calculate_maxMin_maxMax();
                calculate_maxMin_maxMin();
             

            }
          for (int p = 0; p < 10; p++) {
            for (int q = 0; q < arrayOfBins[p].length; q++) {

                totalCost[p] = totalCost[p] + arrayOfBins[p][q].getBinUsed();

            }
            
           
        }
//            System.out.println(" ");

        }
             for (int p = 0; p < 10; p++) {
          
            
            System.out.println(totalCost[p]);
        }
      
        for(int index=0;index<=9;index++){
            averageCost[index]=totalCost[index]/numOfIteration;
            
        }
        costOfAlgo1.setText(averageCost[0]+"");
        costOfAlgo2.setText(averageCost[1]+"");
        costOfAlgo3.setText(averageCost[2]+"");
        costOfAlgo4.setText(averageCost[3]+"");
        costOfAlgo5.setText(averageCost[4]+"");
        costOfAlgo6.setText(averageCost[5]+"");
        costOfAlgo7.setText(averageCost[6]+"");
        costOfAlgo8.setText(averageCost[7]+"");
        costOfAlgo9.setText(averageCost[8]+"");
        costOfAlgo10.setText(averageCost[9]+"");
        
        
        File log = new File("log.txt");

try{
    if(!log.exists()){
        System.out.println("We had to make a new file.");
        log.createNewFile();
    }

    FileWriter fileWriter = new FileWriter(log, true);

    BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
    bufferedWriter.newLine();
    bufferedWriter.write("         "+String.format("%04d", (int)numOfIteration)+"       |");
    bufferedWriter.write("        "+String.format("%03d", numOfInput)+"       |");
    bufferedWriter.write("      "+String.format("%03d", limit)+"        |");
    bufferedWriter.write("  "+String.format("%02d",this.k)+"  |");
    bufferedWriter.write("  "+new DecimalFormat("000.000").format(averageCost[0])+"  |");
    bufferedWriter.write("  "+new DecimalFormat("000.000").format(averageCost[1])+"   |");
    bufferedWriter.write("  "+new DecimalFormat("000.000").format(averageCost[2])+"  |");
    bufferedWriter.write("  "+new DecimalFormat("000.000").format(averageCost[3])+"  |");
    bufferedWriter.write(" "+new DecimalFormat("000.000").format(averageCost[4])+" |");
    bufferedWriter.write("  "+new DecimalFormat("000.000").format(averageCost[5])+" |");
    bufferedWriter.write("  "+new DecimalFormat("000.000").format(averageCost[6])+"   |");
    bufferedWriter.write(" "+new DecimalFormat("000.000").format(averageCost[7])+" |");
    bufferedWriter.write(" "+new DecimalFormat("000.000").format(averageCost[8])+" |");
    bufferedWriter.write(" "+new DecimalFormat("000.000").format(averageCost[9])+" |");
    
    
    
    
    bufferedWriter.close();

    System.out.println("Done");
} catch(IOException e) {
    System.out.println("COULD NOT LOG!!");
}
        
        
        

    }

    public bin[] sortBytotal(bin[] tempArray) {

        Arrays.sort(tempArray, new Comparator<bin>() {

            @Override
            public int compare(bin b1, bin b2) {
                if(b2.getmaxTotal() - b1.getmaxTotal()==0){
                    return (int) (b2.getmax_max() - b1.getmax_max());
                }
                return (int) (b2.getmaxTotal() - b1.getmaxTotal());
//                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        return tempArray;

    }

    public bin[] sortByMaxofMax(bin[] tempArray) {
        Arrays.sort(tempArray, new Comparator<bin>() {

            @Override
            public int compare(bin b1, bin b2) {
                  if(b2.getmax_max() - b1.getmax_max()==0){
                    return (int) (b2.getmax_max()- b1.getmax_max());
                }
                return (int) (b2.getmax_max() - b1.getmax_max());
//                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        return tempArray;
    }

    public bin[] sortByMaxofMin(bin[] tempArray) {

        Arrays.sort(tempArray, new Comparator<bin>() {

            @Override
            public int compare(bin b1, bin b2) {
                if(b2.getmax_min() - b1.getmax_min()==0){
                    return (int) (b2.getmax_max() - b1.getmax_max());
                }
                return (int) (b2.getmax_min() - b1.getmax_min());
//                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        return tempArray;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField costOfAlgo1;
    private javax.swing.JTextField costOfAlgo10;
    private javax.swing.JTextField costOfAlgo2;
    private javax.swing.JTextField costOfAlgo3;
    private javax.swing.JTextField costOfAlgo4;
    private javax.swing.JTextField costOfAlgo5;
    private javax.swing.JTextField costOfAlgo6;
    private javax.swing.JTextField costOfAlgo7;
    private javax.swing.JTextField costOfAlgo8;
    private javax.swing.JTextField costOfAlgo9;
    private javax.swing.JButton input_field_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField k_textfield;
    private javax.swing.JTextField limit_field;
    private javax.swing.JTextField numOfinputField;
    private javax.swing.JTextField numOfiteartionField;
    // End of variables declaration//GEN-END:variables

   private void calculate_firstfit(){
        int i=0;
        for(i=0;i<arrayOfBins[9].length;i++){
           if(arrayOfBins[9][i].getX()+xValue>100||arrayOfBins[9][i].getY()+yValue>100){
               
           }
           else{
              arrayOfBins[9][i].setX(arrayOfBins[9][i].getX() + xValue);

              arrayOfBins[9][i].setY(arrayOfBins[9][i].getY() + yValue); 
               if (arrayOfBins[9][i].getBinUsed() == 0) {
                    arrayOfBins[9][i].setBinUsed(1);
                }
              break;
           }
        }
        if(i==arrayOfBins[9].length){
            for(int j=0;j<=arrayOfBins[9].length-2;j++){
                arrayOfBins[9][j].setX(arrayOfBins[9][j+1].getX());
                arrayOfBins[9][j].setY(arrayOfBins[9][j+1].getY());
                
                
            }
            
            
            arrayOfBins[9][k-1].setX(xValue);
            arrayOfBins[9][k-1].setY(yValue);
               
           
            
            
            arrayOfBins[9][k-1].setBinUsed(arrayOfBins[9][k-1].getBinUsed() + 1);
            
            
        }
        
//        System.out.println(" ");
//        for(int p=0;p<arrayOfBins[9].length;p++){
//            
//            System.out.println(arrayOfBins[9][p].getX() + " " +arrayOfBins[9][p].getY());
//        }
//         System.out.println(" ");
        
       
        
      
   }
    private void calculate_maxTotal_maxTotal() {

        copyOfBinArray[0] = Arrays.copyOf(arrayOfBins[0], arrayOfBins[0].length);
        this.sortBytotal(copyOfBinArray[0]);
//            System.out.println(" ");
//        
//        System.out.println(" ");
        int j = Algorithm_for_placeitem(0);
//        System.out.println("value of j: "+j);
        if (j == copyOfBinArray[0].length) {
            this.sortBytotal(copyOfBinArray[0]);
            Alg_for_free(0);
        }
//        for(int i=0;i<arrayOfBins[0].length;i++){
//            
//            System.out.println(arrayOfBins[0][i].getX() + " " +arrayOfBins[0][i].getY()+" bin no:"+arrayOfBins[0][i].binNumber);
//        }

    }

    private void calculate_maxTotal_maxMax() {
        copyOfBinArray[1] = Arrays.copyOf(arrayOfBins[1], arrayOfBins[1].length);
        this.sortBytotal(copyOfBinArray[1]);
        int j = Algorithm_for_placeitem(1);
        if (j == copyOfBinArray[1].length) {
            sortByMaxofMax(copyOfBinArray[1]);
            Alg_for_free(1);
        }
//        System.out.println(" ");
//        for(int i=0;i<arrayOfBins[1].length;i++){
//            
//            System.out.println(arrayOfBins[1][i].getX() + " " +arrayOfBins[1][i].getY()+" bin no:"+arrayOfBins[1][i].binNumber);
//        }
//        System.out.println(" ");
        //To change body of generated methods, choose Tools | Templates.
    }

    private void calculate_maxTotal_maxMin() {
        copyOfBinArray[2] = Arrays.copyOf(arrayOfBins[2], arrayOfBins[2].length);
        this.sortBytotal(copyOfBinArray[2]);
        int j = Algorithm_for_placeitem(2);
        if (j == copyOfBinArray[2].length) {
            sortByMaxofMin(copyOfBinArray[2]);
            Alg_for_free(2);
        }
        
//                System.out.println(" ");
//        for(int i=0;i<arrayOfBins[2].length;i++){
//            
//            System.out.println(arrayOfBins[2][i].getX() + " " +arrayOfBins[2][i].getY()+" bin no:"+arrayOfBins[2][i].binNumber);
//        }
//        System.out.println(" ");
        //To change body of generated methods, choose Tools | Templates.
    }

    private void calculate_maxMax_maxTotal() {
        copyOfBinArray[3] = Arrays.copyOf(arrayOfBins[3], arrayOfBins[3].length);
        this.sortByMaxofMax(copyOfBinArray[3]);
        int j = Algorithm_for_placeitem(3);
        if (j == copyOfBinArray[3].length) {
            sortBytotal(copyOfBinArray[3]);
            Alg_for_free(3);
        }
//                System.out.println(" ");
//        for(int i=0;i<arrayOfBins[3].length;i++){
//            
//            System.out.println(arrayOfBins[3][i].getX() + " " +arrayOfBins[3][i].getY()+" bin no:"+arrayOfBins[3][i].binNumber);
//        }
//        System.out.println(" ");
        //To change body of generated methods, choose Tools | Templates.
    }

    private void calculate_maxMax_maxMax() {
        copyOfBinArray[4] = Arrays.copyOf(arrayOfBins[4], arrayOfBins[4].length);
        this.sortByMaxofMax(copyOfBinArray[4]);
        int j = Algorithm_for_placeitem(4);
        if (j == copyOfBinArray[4].length) {
            sortByMaxofMax(copyOfBinArray[4]);
            Alg_for_free(4);
        }
//                System.out.println(" ");
//        for(int i=0;i<arrayOfBins[1].length;i++){
//            
//            System.out.println(arrayOfBins[4][i].getX() + " " +arrayOfBins[4][i].getY()+" bin no:"+arrayOfBins[4][i].binNumber);
//        }
//        System.out.println(" ");
//To change body of generated methods, choose Tools | Templates.
    }

    private void calculate_maxMax_maxMin() {
        copyOfBinArray[5] = Arrays.copyOf(arrayOfBins[5], arrayOfBins[5].length);
        this.sortByMaxofMax(copyOfBinArray[5]);
        int j = Algorithm_for_placeitem(5);
        if (j == copyOfBinArray[5].length) {
            sortByMaxofMin(copyOfBinArray[5]);
            Alg_for_free(5);
        }
//                System.out.println(" ");
//        for(int i=0;i<arrayOfBins[5].length;i++){
//            
//            System.out.println(arrayOfBins[5][i].getX() + " " +arrayOfBins[5][i].getY()+" bin no:"+arrayOfBins[5][i].binNumber);
//        }
//        System.out.println(" ");
        //To change body of generated methods, choose Tools | Templates.
    }

    private void calculate_maxMin_maxTotal() {
        copyOfBinArray[6] = Arrays.copyOf(arrayOfBins[6], arrayOfBins[6].length);
        this.sortByMaxofMin(copyOfBinArray[6]);
        int j = Algorithm_for_placeitem(6);
        if (j == copyOfBinArray[6].length) {
            sortBytotal(copyOfBinArray[6]);
            Alg_for_free(6);
        }
//                System.out.println(" ");
//        for(int i=0;i<arrayOfBins[6].length;i++){
//            
//            System.out.println(arrayOfBins[6][i].getX() + " " +arrayOfBins[6][i].getY()+" bin no:"+arrayOfBins[6][i].binNumber);
//        }
//        System.out.println(" ");
        //To change body of generated methods, choose Tools | Templates.
    }

    private void calculate_maxMin_maxMax() {
        copyOfBinArray[7] = Arrays.copyOf(arrayOfBins[7], arrayOfBins[7].length);
        this.sortByMaxofMin(copyOfBinArray[7]);
        int j = Algorithm_for_placeitem(7);
        if (j == copyOfBinArray[7].length) {
            sortByMaxofMax(copyOfBinArray[7]);
            Alg_for_free(7);

        }
//                System.out.println(" ");
//        for(int i=0;i<arrayOfBins[7].length;i++){
//            
//            System.out.println(arrayOfBins[7][i].getX() + " " +arrayOfBins[7][i].getY()+" bin no:"+arrayOfBins[7][i].binNumber);
//        }
//        System.out.println(" ");

        //To change body of generated methods, choose Tools | Templates.
    }

    private void calculate_maxMin_maxMin() {
        copyOfBinArray[8] = Arrays.copyOf(arrayOfBins[8], arrayOfBins[8].length);
        this.sortByMaxofMin(copyOfBinArray[8]);
        int j = Algorithm_for_placeitem(8);
        if (j == copyOfBinArray[8].length) {
            sortByMaxofMin(copyOfBinArray[8]);
            Alg_for_free(8);
        }
//                System.out.println(" ");
//        for(int i=0;i<arrayOfBins[8].length;i++){
//            
//            System.out.println(arrayOfBins[8][i].getX() + " " +arrayOfBins[8][i].getY()+" bin no:"+arrayOfBins[8][i].binNumber);
//        }
//        System.out.println(" ");
        //To change body of generated methods, choose Tools | Templates.
    }

    public int Algorithm_for_placeitem(int j) {
        int i = 0;
        for (i = 0; i < copyOfBinArray[j].length; i++) {

            if (copyOfBinArray[j][i].getX() + xValue > 100 || copyOfBinArray[j][i].getY() + yValue > 100) {

            } else {
                int binNum = copyOfBinArray[j][i].binNumber;

                arrayOfBins[j][binNum].setX(arrayOfBins[j][binNum].getX() + xValue);

                arrayOfBins[j][binNum].setY(arrayOfBins[j][binNum].getY() + yValue);
                if (arrayOfBins[j][binNum].getBinUsed() == 0) {
                    arrayOfBins[j][binNum].setBinUsed(1);
                }
                break;
            }
        }
        return i;

    }

    public void Alg_for_free(int j) {
        int binNum = copyOfBinArray[j][0].binNumber;
//        System.out.println("delted bin num"+binNum);
//                   

        arrayOfBins[j][binNum].setX(xValue);

        arrayOfBins[j][binNum].setY(yValue);
        arrayOfBins[j][binNum].setBinUsed(arrayOfBins[j][binNum].getBinUsed() + 1);

    }

}
