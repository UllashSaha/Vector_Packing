/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vetor_packing_1;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Random;
import java.util.Scanner;

/**
 *
 * @author student
 */
public class anomaly extends javax.swing.JFrame {

    /**
     * Creates new form anomaly
     */
    public int k;
    public String algName;
    int input_x;
    int input_y;
    bin [] arrayOfbins;
    bin [] copyOfBinArray;
    int limit=0;

    int[] totalcost = new int[51];
    double [] averageCost=new double[9];
    public anomaly() {
        initComponents();
    }
    private static final String FILENAME = "random.txt";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        numOfiteartionField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        numOfinputField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        limit_field = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Algorithm");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MaxTotal_MaxTotal" }));

        jButton1.setText("Okay");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setText("                        Total number of Iteration");

        numOfiteartionField.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel17.setText("Number of inputs per iteration");

        jLabel2.setText("       limt of a value of a input ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(limit_field))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numOfiteartionField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numOfinputField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numOfiteartionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numOfinputField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limit_field, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
//        BufferedWriter bw = null;
// FileWriter fw = null;
        System.out.println(" ");
         
        this.limit=Integer.parseInt(limit_field.getText());
        try(BufferedWriter bw = new BufferedWriter(new FileWriter(FILENAME))) {

   
          
            int numOfInput = Integer.parseInt(numOfinputField.getText());
            Random objGenerator = new Random();
            for (int j = 1; j <= numOfInput; j++) {

                input_x = objGenerator.nextInt(limit + 1);
                bw.write(input_x+" ");
               
                input_y = objGenerator.nextInt(limit + 1);
                bw.write(input_y+" ");
                bw.newLine();
                

            }
   

   

  } catch (IOException e) {

   e.printStackTrace();

         }
        finally{
            
        }
       
        
          for (int in = 0; in < 51; in++) {
            totalcost[in] = 0;
         }
       
        this.k = 3;
        for (this.k = 3 ; this.k  <= 50; this.k ++) {
        this.arrayOfbins = new bin[k];
        
       
            for (int j = 0; j < arrayOfbins.length; j++) {
            arrayOfbins[j]=new bin(0,0);
            arrayOfbins[j].binNumber=j;
            arrayOfbins[j].setMaxTotal();
            arrayOfbins[j].setBinUsed(0);

               

            }
            BufferedReader reader = null;
            try {
                File file = new File(FILENAME);
                reader = new BufferedReader(new FileReader(file));

                String line;
                while ((line = reader.readLine()) != null) {

                    String[] array = line.split(" ");
                    input_x = Integer.parseInt(array[0]);
                    input_y = Integer.parseInt(array[1]);
//        System.out.println(input_x+ " "+input_y);
                    if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("MaxTotal_MaxTotal")) {
                        calculate_maxTotal_maxTotal();
                    }

                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        
         
          
            for (int q = 0; q < this.k ; q++) {

                totalcost[this.k] = totalcost[this.k ] + arrayOfbins[q].getBinUsed();

            }
            
            System.out.print(totalcost[this.k ]+ " ");
        
       
        } 
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
      public bin[] sortBytotal(bin[] tempArray) {

        Arrays.sort(tempArray, new Comparator<bin>() {

            @Override
           public int compare(bin b1, bin b2) {
                     if(b2.getmaxTotal() - b1.getmaxTotal()==0){
                    return (int) (b2.getmax_max() - b1.getmax_max());
                }
                     return (int) (b2.getmaxTotal()- b1.getmaxTotal());
//                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
        });
        return tempArray;

    }

    public bin[] sortByMaxofMax(bin[] tempArray) {
        Arrays.sort(tempArray, new Comparator<bin>() {

            @Override
            public int compare(bin b1, bin b2) {
                     if(b2.getmax_max() - b1.getmax_max()==0){
                    return (int) (b2.getmaxTotal() - b1.getmaxTotal());
                }
                     return (int) (b2.getmax_max()- b1.getmax_max());
//                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
        });
        return tempArray;
    }

    public bin[] sortByMaxofMin(bin[] tempArray) {

        Arrays.sort(tempArray, new Comparator<bin>() {

            @Override
                public int compare(bin b1, bin b2) {
                      if(b2.getmax_min() - b1.getmaxTotal()==0){
                    return (int) (b2.getmax_max() - b1.getmax_max());
                }
                     return (int) (b2.getmax_min()- b1.getmax_min());
//                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
        });
        return tempArray;
    }
    private void calculate_maxTotal_maxTotal() {

        copyOfBinArray=Arrays.copyOf(arrayOfbins, arrayOfbins.length);
        this.sortBytotal(copyOfBinArray);
//            System.out.println(" ");
//        
//        System.out.println(" ");
        int j = Algorithm_for_placeitem(0);
//        System.out.println("value of j: "+j);
        if (j == copyOfBinArray.length) {
            this.sortBytotal(copyOfBinArray);
            Alg_for_free(0);
        }
//        for(int i=0;i<arrayOfbins[0].length;i++){
//            
//            System.out.println(arrayOfbins[0][i].getX() + " " +arrayOfbins[0][i].getY()+" bin no:"+arrayOfbins[0][i].binNumber);
//        }

    }
     public int Algorithm_for_placeitem(int j) {
        int i = 0;
        for (i = 0; i < copyOfBinArray.length; i++) {

            if (copyOfBinArray[i].getX() + input_x > 100 || copyOfBinArray[i].getY() + input_y > 100) {

            } else {
                int binNum = copyOfBinArray[i].binNumber;

                arrayOfbins[binNum].setX(arrayOfbins[binNum].getX() + input_x);

                arrayOfbins[binNum].setY(arrayOfbins[binNum].getY() + input_y);
                if (arrayOfbins[binNum].getBinUsed() == 0) {
                    arrayOfbins[binNum].setBinUsed(1);
                }
                break;
            }
        }
        return i;

    }

    public void Alg_for_free(int j) {
        int binNum = copyOfBinArray[0].binNumber;
//        System.out.println("delted bin num"+binNum);
//                   

        arrayOfbins[binNum].setX(input_x);

        arrayOfbins[binNum].setY(input_y);
        arrayOfbins[binNum].setBinUsed(arrayOfbins[binNum].getBinUsed() + 1);

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(anomaly.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(anomaly.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(anomaly.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(anomaly.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new anomaly().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField limit_field;
    private javax.swing.JTextField numOfinputField;
    private javax.swing.JTextField numOfiteartionField;
    // End of variables declaration//GEN-END:variables
}
